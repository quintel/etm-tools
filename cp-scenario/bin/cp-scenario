#!/usr/bin/env ruby

require 'bundler'
Bundler.require(:default)

require_relative '../lib/cp-scenario'

opts = Slop.parse do |o|
  o.banner = 'usage: cp-scenario beta 12345 [options]'
  o.boolean '-p', '--protect', 'Mark created scenarios as protected'
  o.string '-d', '--dataset', 'Dataset for the new scenario'
end

unless opts.arguments.length >= 2
  puts opts
  exit
end

pastel = Pastel.new

api = CPScenario::API.new(CPScenario.translate_endpoint(opts.arguments[0]))
source = CPScenario::Scenario.new(api, opts.arguments[1])

begin
  # Make an API call to assert that the scenario exists.
  source.settings
rescue RestClient::NotFound
  puts pastel.red("Scenario not found: #{ARGV[1].inspect}")
  exit(1)
rescue RestClient::Exception => ex
  puts ex.message
  puts ex.http_body
  exit(1)
end

Output = Struct.new(:success, :error, :pastel)

# Clones a single scenario. Provide the source scenario, API, target dataset
# (nil is acceptable when not changing the dataset) the the class to be used to
# format the scenario summary.
def run(source, api, dataset, protect, output)
  action = CPScenario::Action.new(source, api, dataset, protect)
  scenario = action.call

  if action.success?
    puts output.success.call(scenario, output.pastel)
  else
    puts output.error.call(action, output.pastel)
  end
end

if opts[:dataset]&.include?(',')
  datasets = opts[:dataset].split(',').reject(&:empty?)

  # Shorter output when cloning to multiple datasets.
  output = Output.new(
    CPScenario::CompactSummary,
    ->(action, _) { pastel.red("#{action.dataset}: error") },
    pastel,
  )
else
  datasets = [opts[:dataset]]

  output = Output.new(
    CPScenario::Summary,
    ->(action, _) { action.errors },
    pastel,
  )
end

datasets.each do |dataset|
  run(source, api, dataset, opts[:protect], output)
end
